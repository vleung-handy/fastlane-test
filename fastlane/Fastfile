# More documentation about how to customize your build
# can be found here:
# https://docs.fastlane.tools
fastlane_version "1.111.0"

default_platform :android

before_all do
  ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

  repo_name = "vleung-handy/fastlane-test"
  ENV["GITHUB_API_URL"] = "https://api.github.com/repos/#{repo_name}"
  ENV["GITHUB_URL"] = "https://github.com/#{repo_name}"

  ENV["S3_BUCKET_APP_RELEASE_DIR"] = "provider"
  ENV["S3_BUCKET"] = "mobile-android-assets"
  ENV["S3_REGION"] = "us-east-1"

  ENV["APP_BUILD_OUTPUT_DIR"] = Dir.pwd + '/../app/build/outputs'
  ENV["APK_DIR"] = "#{ENV['APP_BUILD_OUTPUT_DIR']}/apk"

  #the following variables should be set in your ~/.bash_profile
  #GITHUB_ACCESS_TOKEN
  #CRASHLYTICS_API_TOKEN
  #CRASHLYTICS_BUILD_SECRET
  #S3_ACCESS_KEY
  #S3_SECRET_ACCESS_KEY

end

desc "options: type:<patch|new>"
lane :release do |options|
  type = options[:type]
  if type == "patch"
    release_patch
  elsif type == "new"
    release_new
  else
    exit_with_error(error_message: 'Missing or invalid release type. Options: type:<patch|new>')
  end
end

lane :beta do |options|
  notes = options[:notes]
  tester_emails = options[:tester_emails]

  #only set tester groups if specified or tester_emails not specified
  if !options[:tester_groups].nil?
    tester_groups = options[:tester_groups]
  elsif tester_emails.nil?
    #no testers specified; use this as default
    tester_groups = ["android-devs", "android-internal-testers"]
  end

  ensure_git_branch_release_candidate
  ensure_git_branch_clean_and_latest

  if !options[:skip_build]
    build_variant = options[:variant] || "hostedRelease"
    build_variant[0] = build_variant[0,1].upcase
    gradle_build_variant = "assemble" + build_variant

    gradle(task: "clean")
    gradle(task: gradle_build_variant)
  end

  crashlytics(
    api_token: ENV["CRASHLYTICS_API_TOKEN"],
    build_secret: ENV["CRASHLYTICS_BUILD_SECRET"],
    groups: tester_groups,
    emails: tester_emails,
    notes: notes
  )

  slack(
    message: "New Android build uploaded to Crashlytics!",
    channel: "pro-app-releases"
  )
end

lane :applause do |options|
  ensure_git_branch_release_candidate
  ensure_git_branch_clean_and_latest

  namespace = options[:namespace]
  unless namespace
    exit_with_error(error_message: 'Must specify namespace (e.g. fastlane applause namespace:applause-android)')
  end

  # Set namespace override
  sh("cd ..; ./scripts/override environment=#{namespace}")

  gradle(task: "clean")
  gradle(task: "assembleStageRelease")

  # Remove namespace override
  sh("cd ..; ./scripts/kill-override")

  upload_apk_to_current_github_release(apk_file_name_pattern: 'handy-pro-stage-release*')

  tag_name = "v#{get_current_version}"
  slack(
    message: "New Applause Android Provider build uploaded to Github! #{ENV["GITHUB_URL"]}/releases/tag/#{tag_name}",
    channel: "applause-testing"
  )
end

lane :release_candidate do |options|
  ensure_git_branch(branch: 'develop')
  ensure_git_branch_clean_and_latest
  _, major, minor, _ = get_current_version.split(/([0-9]+)\.([0-9]+)\.([0-9]+)/)
  version_suffix = "#{major}.#{minor}.x"
  release_candidate_branch_name = 'release_candidate_v' + version_suffix
  sh('git checkout -b ' + release_candidate_branch_name)
  sh('git push --set-upstream origin ' + release_candidate_branch_name)
end

lane :version_bump do |options|
  ensure_git_branch_clean_and_latest
  version_bump_type = options[:type]

  valid_version_bump_types = ["major", "minor", "patch"]

  unless valid_version_bump_types.include?(version_bump_type)
    exit_with_error(error_message: "Must specify version bump type (i.e. fastlane version_bump type:[#{valid_version_bump_types.join('|')}])")
  end

  if version_bump_type == "patch"
    ensure_git_branch_release_candidate
  end

  version_number = increase_version_number(type: version_bump_type)

  # Remove all tags not on remote
  sh("git tag -l | xargs git tag -d")
  sh("git fetch --tags")

  if version_bump_type == "patch"
    version_tag = "v#{version_number}"
    if git_tag_exists(tag: version_tag)
      UI.error("Unable to add tag #{version_tag}")
    else
      create_release(tag: version_tag)
    end
  end
end

private_lane :increase_version_number do |options|
  version_bump_type = options[:type]
  old_version = get_current_version
  _, major, minor, patch = old_version.split(/([0-9]+)\.([0-9]+)\.([0-9]+)/)
  case version_bump_type
  when 'major'
    major = major.to_i + 1
  when 'minor'
    minor = minor.to_i + 1
  when 'patch'
    patch = patch.to_i + 1
  else
    exit_with_error(error_message: "Unrecognized version_bump_type: " + version_bump_type)
  end
  new_version = "#{major}.#{minor}.#{patch}"
  sh("sed -i '' -E 's/#{old_version}/#{new_version}/g' ../app/build.gradle")
  version_bump_message = "Bumped up version to #{new_version}"
  git_commit(path: './app/build.gradle', message: version_bump_message)
  push_to_git_remote
  UI.success(version_bump_message)
  new_version
end

private_lane :create_release do |options|
  version_tag = options[:tag]
  data = {
    tag_name:         version_tag,
    target_commitish: branch_name,
    name:             version_tag,
    body:             "Release #{version_tag}",
    prerelease:       true,
  }

  url = "#{ENV["GITHUB_API_URL"]}/releases?access_token=#{ENV["GITHUB_ACCESS_TOKEN"]}"
  sh("curl -s -S -X POST -H 'Content-Type: application/json' -d '#{JSON.generate(data)}' #{url} > /dev/null")
end

private_lane :upload_asset_github do |options|
  tag_name     = options[:tag]
  file_path    = options[:path]
  file_name    = options[:name]
  content_type = options[:content_type]

  # Get upload URL
  url = "#{ENV["GITHUB_API_URL"]}/releases/tags/#{tag_name}?access_token=#{ENV["GITHUB_ACCESS_TOKEN"]}"
  raw_response = sh("curl -s -S -X GET -H 'Content-Type: application/json' #{url}", log: false)
  response = JSON.parse(raw_response, symbolize_names: true)
  upload_url = response[:upload_url]
  upload_url = upload_url.split(/\{\?.*\}/)[0] if upload_url # removes query spec (e.g. "{?name, label}" ) from the URL

  unless upload_url
    exit_with_error(error_message: "Upload URL not found for release #{tag_name}")
  end

  url = "#{upload_url}?name=#{file_name}"
  sh("curl -s -S -X POST"\
     " -H 'Authorization: token #{ENV["GITHUB_ACCESS_TOKEN"]}'"\
     " -H 'Content-Type: #{content_type}'"\
     " --data-binary @#{file_path}"\
     " #{url}", log: false)
  UI.success("Upload success!")
end

private_lane :upload_apk_to_aws_release_folder do |options|
  apk_dir = ENV["APK_DIR"]
  apk_file_name_pattern = options[:apk_file_name_pattern]
  apk_file_name = get_apk_file_name_by_pattern(apk_file_name_pattern)

  apk_file_path = "#{apk_dir}/#{apk_file_name}"

  aws_s3(
    access_key: ENV['S3_ACCESS_KEY'],
    secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
    bucket: ENV['S3_BUCKET'],
    region: ENV['S3_REGION'],
    apk: apk_file_path,
    app_directory: ENV["S3_BUCKET_APP_RELEASE_DIR"],
    path: '',
    upload_metadata: false
  )
end

private_lane :upload_asset_to_current_github_release do |options|
  options[:tag] = "v#{get_current_version}"
  upload_asset_github(options)
end

private_lane :upload_apk_to_current_github_release do |options|
  apk_file_name_pattern = options[:apk_file_name_pattern]
  unless apk_file_name_pattern
    exit_with_error(error_message: "Must specify apk_file_name_pattern (ex. 'handy-pro*')")
  end
  apk_dir = ENV["APK_DIR"]

  apk_file_name = get_apk_file_name_by_pattern(apk_file_name_pattern)
  unless apk_file_name
    exit_with_error(error_message: "APK with pattern #{apk_file_name_pattern} not found in #{apk_dir}")
  end

  upload_asset_to_current_github_release(
    path:         "#{apk_dir}/#{apk_file_name}",
    name:         "#{apk_file_name}",
    content_type: "application/vnd.android.package-archive"
  )
end

private_lane :get_current_version do
  sh('cat ../app/build.gradle | sed -n -E "s/^.*\versionName[[:space:]]+\'(.*)\'.*$/\1/p"').strip
end

private_lane :ensure_git_branch_release_candidate do
  release_candidate_branch_pattern = /release_candidate_v[0-9]+\.[0-9]+\.x/
  if release_candidate_branch_pattern.match(branch_name).nil?
    exit_with_error(error_message: "Current branch must be a release candidate branch (e.g. release_candidate_v1.29.x)")
  end
end

private_lane :ensure_required_env_variables_present do
  ["GITHUB_ACCESS_TOKEN", "CRASHLYTICS_API_TOKEN", "CRASHLYTICS_BUILD_SECRET", "S3_ACCESS_KEY", "S3_SECRET_ACCESS_KEY"].each do |variable|
    if ENV[variable].to_s.empty?
      exit_with_error(error_message: "required env variable '#{variable}' is not defined")
    end
  end
end

private_lane :ensure_git_branch_clean_and_latest do |options|
  ensure_git_status_clean
  git_pull
end

private_lane :branch_name do
  sh('git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3').strip
end

private_lane :exit_with_error do |options|
  UI.error(options[:error_message])
  exit
end

# creates a minor release from the current develop branch
private_lane :release_new do |options|
  ensure_git_branch(branch: 'develop')
  ensure_git_branch_clean_and_latest
  release_candidate
  release_patch
  sh('git checkout develop')
  ensure_git_branch(branch: 'develop') #just in case above fails for some reason
  ensure_git_branch_clean_and_latest
  version_bump(type:"minor")
end

# creates a patch release from the current release candidate branch
private_lane :release_patch do
  ensure_git_branch_release_candidate
  ensure_git_branch_clean_and_latest
  version_bump(type:"patch")
  build_and_upload_release_assets
end

# Build the hosted and store APKs and upload them to Github, Fabric, and AWS
private_lane :build_and_upload_release_assets do
  ensure_required_env_variables_present
  ensure_git_branch_release_candidate
  ensure_git_branch_clean_and_latest

  gradle(task: "clean")

  gradle(task: "assembleHostedRelease")
  hosted_apk_file_name = get_apk_file_name_by_pattern('handy-pro-hosted-release*')
  hosted_apk_file_base_name = File.basename(hosted_apk_file_name, File.extname(hosted_apk_file_name))
  upload_apk_to_current_github_release(apk_file_name_pattern: hosted_apk_file_name)
  upload_asset_to_current_github_release(
    path:         "#{ENV['APP_BUILD_OUTPUT_DIR']}/mapping/hosted/release/mapping.txt",
    name:         "#{hosted_apk_file_base_name}-mapping.txt",
    content_type: "text"
  )
  upload_apk_to_aws_release_folder(apk_file_name_pattern: hosted_apk_file_name)
  beta(skip_build: true)

  gradle(task: "assembleStoreRelease")
  store_apk_file_name = get_apk_file_name_by_pattern('handy-pro-store-release*')
  store_apk_file_base_name = File.basename(store_apk_file_name, File.extname(store_apk_file_name))
  upload_apk_to_current_github_release(apk_file_name_pattern: store_apk_file_name)
  upload_asset_to_current_github_release(
    path:         "#{ENV['APP_BUILD_OUTPUT_DIR']}/mapping/store/release/mapping.txt",
    name:         "#{store_apk_file_base_name}-mapping.txt",
    content_type: "text"
  )
  upload_apk_to_aws_release_folder(apk_file_name_pattern: store_apk_file_name)
end

# helper methods

def get_apk_file_name_by_pattern(apk_file_name_pattern)
  apk_dir = ENV["APK_DIR"]
  return Dir.entries(apk_dir).select{ |entry| /#{apk_file_name_pattern}/.match(entry) }.first
end
