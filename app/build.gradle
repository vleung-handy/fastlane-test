buildscript {
    repositories {
        flatDir {
            dirs 'libs'
            dirs 'aars'
        }
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.5'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.0'
    }
}
repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://dl.bintray.com/urbanairship/android" }
    maven { url "https://jitpack.io" }
    maven { url 'http://mobile-sdk.jumio.com' }
    maven { url "https://raw.githubusercontent.com/layerhq/releases-android/master/releases/" }
    maven { url "https://raw.githubusercontent.com/layerhq/Atlas-Android/master/releases/" }
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'com.android.application'


apply plugin: 'io.fabric'
apply plugin: 'jacoco'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'android-apt'

apply from: 'jacoco.gradle'

def computeVersionCode(versionName) {
    def versionNameMatcher = (versionName =~ /^([1-9]\d*)\.(\d{1,2})\.(\d{1,2})$/)
    if (versionNameMatcher.matches()) {
        def identifiers = (versionNameMatcher[0] - [versionName])
        def (major, minor, patch) = identifiers.collect { it.toInteger() }
        def versionCode = (major * 10000) + (minor * 100) + (patch * 1)

        def out = services.create("debug")
        out.println("\nBuilding version ${versionName} (${versionCode})\n")
        return versionCode
    } else {
        throw new InvalidUserDataException("Illegal version name ${versionName}")
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion '24.0.3'
    useLibrary 'org.apache.http.legacy'
    testBuildType "debug"

    defaultConfig {
        multiDexEnabled true
        applicationId "com.handy.portal"
        minSdkVersion 16
        targetSdkVersion 25
        versionName '1.20.0'
        versionCode computeVersionCode(versionName)
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        testInstrumentationRunner 'com.handy.portal.core.CoreTestRunner'
    }

    signingConfigs {
        // This debug is need for google map to work in debug build
        debug {
            keyAlias 'HandyProdKey'
            keyPassword 'S0H@ndy!'
            storeFile file('keys/handy-prod-key.keystore')
            storePassword 'S0H@ndy!'
        }
        prod {
            keyAlias 'HandyProdKey'
            keyPassword 'S0H@ndy!'
            storeFile file('keys/handy-prod-key.keystore')
            storePassword 'S0H@ndy!'
        }
        playstore {
            keyAlias 'HandyReleaseKey'
            keyPassword 'S0H@ndy!'
            storeFile file('keys/handy-release-key.keystore')
            storePassword 'S0H@ndy!'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
    }

    productFlavors {
        hosted {
            applicationId "com.handy.portal"
            manifestPlaceholders = [PACKAGE_NAME: "com.handy.portal"]
            versionName defaultConfig.versionName
            signingConfig signingConfigs.prod
        }
        store {
            applicationId 'com.handybook.handy_portal'
            manifestPlaceholders = [PACKAGE_NAME: "com.handybook.handy_portal"]
            versionName defaultConfig.versionName + "p"
            signingConfig signingConfigs.playstore
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def buildType = variant.buildType.name == 'release' ? '' : '-' + variant.buildType.name;
                output.outputFile = new File(output.outputFile.parentFile,
                        "handy-pro${buildType}-${variant.versionName}.apk");
            }
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/library-res'
            ]
        }
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

ext {
    supportLibraryVersion = '25.1.0'
    googlePlayServicesVersion = '9.8.0'
    jumioVersion = '2.4.0'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile files('libs/YouTubeAndroidPlayerApi-1.2.2.jar')
    compile (name: 'handy-shared', ext: 'aar')

    // Support Libraries
    compile 'com.android.support:multidex:1.0.1'     //Multidexing support
    compile "com.android.support:support-v4:$supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    //Recommended for in-app messaging

    //Google services
    compile "com.google.android.gms:play-services-gcm:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-location:$googlePlayServicesVersion"
    compile "com.google.android.gms:play-services-maps:$googlePlayServicesVersion"
    compile "com.google.firebase:firebase-messaging:$googlePlayServicesVersion"
    compile 'com.google.guava:guava:19.0'

    //Square libraries, butterknife, dagger, retrofit, picasso
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.jakewharton:butterknife:8.1.0'
    apt 'com.jakewharton:butterknife-compiler:8.1.0'

    compile 'org.greenrobot:eventbus:3.0.0'

    // Signature for checkout
    compile 'com.github.gcacace:signature-pad:1.1.0'

    // For circle image views
    compile 'de.hdodenhof:circleimageview:2.1.0'

    // For cropping images
    compile 'com.yalantis:ucrop:2.2.0'

    // For better visualizing circular graphs
    compile 'com.github.bmarrdev:android-DecoView-charting:v0.9.5'

    //Custom font display
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'

    //Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    //SecurePrefs storage
    compile 'com.scottyab:secure-preferences-lib:0.1.4'

    //Urban Airship SDK
    compile 'com.urbanairship.android:urbanairship-sdk:6.3.0'

    //particle system/animations
    compile 'com.plattysoft.leonids:LeonidsLib:1.3.1'

    // Sticky list header
    compile 'se.emilsjolander:stickylistheaders:2.7.0'

    // Jumio ID Verification
    compile "com.jumio.android:core:$jumioVersion@aar"
    compile "com.jumio.android:nv:$jumioVersion@aar"
    compile "com.jumio.android:nv-barcode:$jumioVersion@aar"
    compile "com.jumio.android:javadoc:$jumioVersion"
    compile "com.jumio.android:nv-barcode:$jumioVersion@aar"
    compile "com.jumio.android:nv-mrz:$jumioVersion@aar"
    compile "com.jumio.android:nv-nfc:$jumioVersion@aar"
    compile 'net.sf.scuba:scuba-sc-android:0.0.9'

    //Stripe payment processing
    compile 'com.stripe:stripe-android:1.0.4'

    //Mix Panel
    compile "com.mixpanel.android:mixpanel-android:4.9.2"

    //Appsee - user-tracking sdk that allows us to record the screen
    compile 'com.appsee:appsee-android:2.3'

    //Layer
    compile 'com.layer.atlas:layer-atlas:0.3.5'
    compile 'com.layer.sdk:layer-sdk:0.23.4'

    //Testing
    testCompile 'org.robolectric:robolectric:3.1.4'
    testCompile 'org.robolectric:shadows-support-v4:3.1.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    //Espresso libraries for automation testing
    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude module: 'support-annotations'
    }
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}

dexcount {
    format = "tree"
    includeClasses = true
    includeFieldCount = true
    includeTotalMethodCount = true
    orderByMethodCount = true
    verbose = false
    maxTreeDepth = 3
    teamCityIntegration = false
    enableForInstantRun = false
    teamCitySlug = null
}

apply plugin: 'com.google.gms.google-services'
